#
# Copyright (C) 2017 Cybernetica
#
# Research/Commercial License Usage
# Licensees holding a valid Research License or Commercial License
# for the Software may use this file according to the written
# agreement between you and Cybernetica.
#
# GNU General Public License Usage
# Alternatively, this file may be used under the terms of the GNU
# General Public License version 3.0 as published by the Free Software
# Foundation and appearing in the file LICENSE.GPL included in the
# packaging of this file.  Please review the following information to
# ensure the GNU General Public License version 3.0 requirements will be
# met: http://www.gnu.org/copyleft/gpl-3.0.html.
#
# For further information, please contact us at sharemind@cyber.ee.
#

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(SharemindLibConfiguration CXX)

SET(CPACK_PACKAGE_VERSION_MAJOR "0")
SET(CPACK_PACKAGE_VERSION_MINOR "1")
SET(CPACK_PACKAGE_VERSION_PATCH "0")
SET(SHAREMIND_LIBCONFIGURATION_SOVERSION
    "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}")
SET(SHAREMIND_LIBCONFIGURATION_VERSION
    "${SHAREMIND_LIBCONFIGURATION_SOVERSION}.${CPACK_PACKAGE_VERSION_PATCH}")

INCLUDE("${CMAKE_CURRENT_SOURCE_DIR}/config.local" OPTIONAL)
INCLUDE("${CMAKE_CURRENT_BINARY_DIR}/config.local" OPTIONAL)
INCLUDE(CheckCXXSourceCompiles)

SET(Boost_USE_STATIC_RUNTIME OFF)
FIND_PACKAGE(Boost COMPONENTS filesystem iostreams REQUIRED)
FIND_PACKAGE(SharemindCxxHeaders REQUIRED)

SET(SHAREMIND_LIBCONFIGURATION_EXTERNAL_LINK_LIBRARIES "")
LIST(APPEND SHAREMIND_LIBCONFIGURATION_EXTERNAL_LINK_LIBRARIES
    ${Boost_LIBRARIES}
    ${SharemindCxxHeaders_LIBRARIES}
)
LIST(REMOVE_DUPLICATES SHAREMIND_LIBCONFIGURATION_EXTERNAL_LINK_LIBRARIES)

SET(SHAREMIND_LIBCONFIGURATION_EXTERNAL_INCLUDE_DIRS "")
LIST(APPEND SHAREMIND_LIBCONFIGURATION_EXTERNAL_INCLUDE_DIRS
    ${Boost_INCLUDE_DIRS}
    ${SharemindCxxHeaders_INCLUDE_DIRS}
)
LIST(REMOVE_DUPLICATES SHAREMIND_LIBCONFIGURATION_EXTERNAL_INCLUDE_DIRS)

SET(SHAREMIND_LIBCONFIGURATION_EXTERNAL_DEFINITIONS "")
LIST(APPEND SHAREMIND_LIBCONFIGURATION_EXTERNAL_DEFINITIONS
    ${SharemindCxxHeaders_DEFINITIONS}
)
LIST(REMOVE_DUPLICATES SHAREMIND_LIBCONFIGURATION_EXTERNAL_DEFINITIONS)


SET(SHAREMIND_LIBCONFIGURATION_INSTALL_LINK_LIBRARIES
    ${SHAREMIND_LIBCONFIGURATION_EXTERNAL_LINK_LIBRARIES}
    "-L${CMAKE_INSTALL_PREFIX}/lib" "-lsharemind_configuration")
SET(SHAREMIND_LIBCONFIGURATION_INSTALL_INCLUDE_DIRS
    "${CMAKE_INSTALL_PREFIX}/include"
    ${SHAREMIND_LIBCONFIGURATION_EXTERNAL_INCLUDE_DIRS})
SET(SHAREMIND_LIBCONFIGURATION_INSTALL_DEFINITIONS
    ${SHAREMIND_LIBCONFIGURATION_EXTERNAL_DEFINITIONS})
LIST(REMOVE_DUPLICATES SHAREMIND_LIBCONFIGURATION_INSTALL_INCLUDE_DIRS)

INCLUDE_DIRECTORIES(${SHAREMIND_LIBCONFIGURATION_EXTERNAL_INCLUDE_DIRS})
ADD_DEFINITIONS(${SHAREMIND_LIBCONFIGURATION_EXTERNAL_DEFINITIONS})
ADD_COMPILE_OPTIONS(
  "-std=c++11" "-Wall" "-Wextra" "-O2" "-fPIC"
  "$<$<NOT:$<STREQUAL:$<CONFIGURATION>,Release>>:-ggdb>"
  "$<$<NOT:$<STREQUAL:$<CONFIGURATION>,Release>>:-fno-omit-frame-pointer>"
  "$<$<STREQUAL:$<CONFIGURATION>,Release>:-DNDEBUG>"
  "$<$<STREQUAL:$<CONFIGURATION>,Release>:-fomit-frame-pointer>"
)

INCLUDE(CheckCXXCompilerFlag)
FUNCTION(CHECK_ADD_COMPILER_FLAG flag)
    STRING(SUBSTRING "${flag}" 1 -1 FlagName)
    CHECK_CXX_COMPILER_FLAG("${flag}" CXX_COMPILER_HAS_${FlagName}_FLAG)
    IF(CXX_COMPILER_HAS_${FlagName}_FLAG)
        ADD_COMPILE_OPTIONS("${flag}")
    ENDIF()
ENDFUNCTION()
CHECK_ADD_COMPILER_FLAG("-Wzero-as-null-pointer-constant")
CHECK_ADD_COMPILER_FLAG("-Wsuggest-override")
CHECK_ADD_COMPILER_FLAG("-Wno-noexcept-type")

FILE(GLOB_RECURSE SHAREMIND_LIBCONFIGURATION_SOURCES
     "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
FILE(GLOB_RECURSE SHAREMIND_LIBCONFIGURATION_HEADERS
     "${CMAKE_CURRENT_SOURCE_DIR}/src/*.h")
ADD_LIBRARY("libconfiguration" SHARED
    ${SHAREMIND_LIBCONFIGURATION_SOURCES}
    ${SHAREMIND_LIBCONFIGURATION_HEADERS})
SET_TARGET_PROPERTIES("libconfiguration" PROPERTIES
                      OUTPUT_NAME "sharemind_configuration"
                      VERSION "${SHAREMIND_LIBCONFIGURATION_VERSION}"
                      SOVERSION "${SHAREMIND_LIBCONFIGURATION_SOVERSION}")
TARGET_LINK_LIBRARIES("libconfiguration"
                      ${SHAREMIND_LIBCONFIGURATION_EXTERNAL_LINK_LIBRARIES})
INSTALL(TARGETS "libconfiguration" LIBRARY DESTINATION "lib" COMPONENT lib)

INSTALL(FILES ${SHAREMIND_LIBCONFIGURATION_HEADERS}
        DESTINATION "include/sharemind/libconfiguration"
        COMPONENT dev)

FILE(GLOB_RECURSE SHAREMIND_LIBCONFIGURATION_INFILES
     "${CMAKE_CURRENT_SOURCE_DIR}/*.in")
ADD_CUSTOM_TARGET("include_SHAREMIND_LIBCONFIGURATION_INFILES_in_IDE"
                  SOURCES ${SHAREMIND_LIBCONFIGURATION_INFILES})

# Tests:
ENABLE_TESTING()
ADD_CUSTOM_TARGET(check COMMAND "${CMAKE_CTEST_COMMAND}")
FILE(GLOB_RECURSE SHAREMIND_LIBCONFIGURATION_TESTS
    "${CMAKE_CURRENT_SOURCE_DIR}/tests/Test*.cpp")
ADD_CUSTOM_TARGET("include_SHAREMIND_LIBCONFIGURATION_TESTS_in_IDE"
    SOURCES ${SHAREMIND_LIBCONFIGURATION_TESTS})
FOREACH(test IN LISTS SHAREMIND_LIBCONFIGURATION_TESTS)
    GET_FILENAME_COMPONENT(testName "${test}" NAME_WE)
    ADD_EXECUTABLE("testImpl_${testName}" EXCLUDE_FROM_ALL "${test}")
    TARGET_LINK_LIBRARIES("testImpl_${testName}" libconfiguration)
    ADD_DEPENDENCIES(check "testImpl_${testName}")
    ADD_TEST(NAME "test_${testName}" COMMAND "testImpl_${testName}")
ENDFOREACH()

CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/SharemindLibConfigurationConfig.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/SharemindLibConfigurationConfig.cmake"
  @ONLY)
INSTALL(FILES
  "${CMAKE_CURRENT_BINARY_DIR}/SharemindLibConfigurationConfig.cmake"
  DESTINATION "lib/SharemindLibConfiguration"
  COMPONENT dev)
CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/SharemindLibConfigurationConfigVersion.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/SharemindLibConfigurationConfigVersion.cmake"
  @ONLY)
INSTALL(FILES
  "${CMAKE_CURRENT_BINARY_DIR}/SharemindLibConfigurationConfigVersion.cmake"
  DESTINATION "lib/SharemindLibConfiguration"
  COMPONENT dev)


# Packaging:
SET(CPACK_PACKAGE_VENDOR "Cybernetica AS")
SET(CPACK_PACKAGE_CONTACT "Sharemind packaging <sharemind-packaging@cyber.ee>")
SET(CPACK_GENERATOR "DEB")
SET(CPACK_DEBIAN_PACKAGE_NAME "libsharemind-configuration")
SET(CPACK_DEBIAN_PACKAGE_RELEASE "cyber1")
SET(CPACK_DEBIAN_COMPRESSION_TYPE "xz")
SET(CPACK_DEB_COMPONENT_INSTALL "ON")
SET(CPACK_DEBIAN_FILE_NAME "DEB-DEFAULT")

SET(CPACK_DEBIAN_LIB_PACKAGE_NAME "libsharemind-configuration")
SET(CPACK_COMPONENT_DEV_DESCRIPTION "Sharemind configuration library development headers")
SET(CPACK_COMPONENT_LIB_DESCRIPTION "Sharemind configuration library")
SET(CPACK_DEBIAN_DEV_PACKAGE_DEPENDS
    "libsharemind-configuration (= ${SHAREMIND_LIBCONFIGURATION_VERSION}), libsharemind-cxxheaders-dev (>= 0.1.0), libboost-filesystem-dev (>= 1.50), libboost-iostreams-dev (>= 1.50), libc6-dev (>= 2.19), libstdc++-dev")
SET(CPACK_DEBIAN_LIB_PACKAGE_DEPENDS
    "libboost-filesystem-dev (>= 1.50), libboost-iostreams-dev (>= 1.50), libstdc++6 (>= 4.8.0), libc6 (>= 2.19)")
SET(CPACK_DEBIAN_DEV_PACKAGE_SECTION "libdevel")
SET(CPACK_DEBIAN_LIB_PACKAGE_SECTION "libs")
SET(CPACK_DEBIAN_DEV_PACKAGE_ARCHITECTURE "any")
INCLUDE(CPack)
